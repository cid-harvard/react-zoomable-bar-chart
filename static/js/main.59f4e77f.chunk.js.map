{"version":3,"sources":["../../src/d3/barChart.ts","../../src/components/ZoomableBarChart.tsx","../../src/index.tsx","App.tsx","index.tsx"],"names":["ranges","divider","suffix","formatNumber","n","range","parseFloat","LabelPlacement","SizingElm","styled","ZoomableBarChart","props","id","sizingNodeRef","useRef","svgNodeRef","useState","window","useEffect","updateWindowWidth","debounce","setWindowWidth","console","svgNode","sizingNode","input","labelFont","margin","axisLabels","width","size","height","xScale","d3","yScale","svg","container","allYValues","data","datum","y","axisMinMax","minY","rawMinY","Math","maxY","rawMaxY","d","xVal","fill","stroke","hideAxis","averageLines","line","createBarChart","clientHeight","windowWidth","ref","key","Root","React","x","App","left","bottom","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.59f4e77f.chunk.js","sourcesContent":["import * as d3 from 'd3';\n\nconst ranges = [\n  { divider: 1e18 , suffix: 'E' },\n  { divider: 1e15 , suffix: 'P' },\n  { divider: 1e12 , suffix: 'T' },\n  { divider: 1e9 , suffix: 'B' },\n  { divider: 1e6 , suffix: 'M' },\n  { divider: 1e3 , suffix: 'k' },\n];\n\nconst formatNumber = (n: number) => {\n  for (const range of ranges) {\n    if (n >= range.divider) {\n      return parseFloat((n / range.divider).toFixed(2)).toString() + range.suffix;\n    }\n  }\n  return n.toString();\n};\n\nexport interface Datum {\n  x: string;\n  y: number;\n  fill?: string;\n  stroke?: string;\n  tooltipContent?: string;\n  tooltipContentOnly?: boolean;\n  onClick?: () => void;\n}\n\ninterface Dimensions {\n  width: number;\n  height: number;\n}\n\nexport enum LabelPlacement {\n  left = 'left',\n  right = 'right',\n}\n\ninterface Input {\n  svg: d3.Selection<any, unknown, null, undefined>;\n  // tooltip: d3.Selection<any, unknown, null, undefined>;\n  data: Datum[][];\n  size: Dimensions;\n  axisLabels?: {left?: string, bottom?: string};\n  axisMinMax?: {\n    minY?: number,\n    maxY?: number,\n  };\n  hideAxis?: {\n    left?: boolean;\n    bottom?: boolean;\n  };\n  averageLines?: {\n    value: number,\n    label?: string;\n    labelPlacement?: LabelPlacement;\n    strokeWidth?: number;\n    strokeDasharray?: number;\n    strokeColor?: string;\n  }[];\n  labelFont?: string;\n}\n\nexport default (input: Input) => {\n  const {\n    svg, data, size, axisLabels, axisMinMax, hideAxis,\n    averageLines, labelFont,\n  } = input;\n  console.log(svg);\n\n  const margin = {\n    top: 30, right: 30,\n    bottom: axisLabels && axisLabels.bottom ? 60 : 30,\n    left: 35};\n  const width = size.width - margin.left - margin.right;\n  const height = size.height - margin.bottom - margin.top;\n\n    // set the ranges\n  const xScale = d3.scaleBand()\n            .range([0, width])\n            .padding(0.1);\n  const yScale = d3.scaleLinear()\n            .range([height, 0]);\n\n  // append the svg object to the body of the page\n  // append a 'group' element to 'svg'\n  // moves the 'group' element to the top left margin\n  svg\n      .attr('width', width + margin.left + margin.right)\n      .attr('height', height + margin.top + margin.bottom);\n\n  const container = svg\n    .append('g')\n      .attr('transform',\n            'translate(' + margin.left + ',' + margin.top + ')');\n  const allYValues: number[] = [];\n  data.forEach(datum => datum.forEach(({y}) => allYValues.push(y)));\n\n  const minScaleBuffer = 0.9;\n  const maxScaleBuffer = 1.1;\n\n  let minY: number;\n  let maxY: number;\n\n  if (axisMinMax !== undefined && axisMinMax.minY !== undefined) {\n    minY = axisMinMax.minY;\n  } else {\n    const rawMinY = d3.min(allYValues);\n    minY = rawMinY ? Math.floor(rawMinY * minScaleBuffer) : 0;\n  }\n\n  if (axisMinMax !== undefined && axisMinMax.maxY !== undefined) {\n    maxY = axisMinMax.maxY;\n  } else {\n    const rawMaxY = d3.max(allYValues);\n    maxY = rawMaxY ? Math.floor(rawMaxY * maxScaleBuffer) : 0;\n  }\n\n  // Scale the range of the data in the domains\n  xScale.domain(data && data.length ? data[0].map(function(d) { return d.x; }) : [])\n        .rangeRound([0, width])\n        .paddingInner(0.2);\n  yScale.domain([minY, maxY]);\n\n  // append the rectangles for the bar chart\n  data.forEach((dataset, i) => {\n    container.selectAll('.bar-' + i)\n        .data(dataset)\n      .enter().append('rect')\n        .attr('class', 'bar')\n        .attr('x', function(d) {\n          const xVal = xScale(d.x);\n          return xVal ? xVal : 0;\n        })\n        .attr('width', xScale.bandwidth())\n        .attr('y', function(d) { return yScale(d.y); })\n        .style('fill', ({fill}) => fill ? fill : '#69b3a2')\n        .style('stroke', ({stroke}) => stroke ? stroke : 'none')\n        .style('stroke-width', 3)\n        .attr('height', function(d) { return height - yScale(d.y); })\n        // .on('mousemove', ({x, tooltipContent, tooltipContentOnly}) => {\n        //   if (tooltipContentOnly && tooltipContent && tooltipContent.length) {\n        //     tooltip.html(tooltipContent);\n        //   } else {\n        //     const content = tooltipContent === undefined || tooltipContent.length === 0\n        //       ? '' : `:<br />${tooltipContent}`;\n        //     tooltip.html(`<strong>${x}</strong>${content}`);\n        //   }\n        //   tooltip\n        //     .style('display', 'block')\n        //     .style('position', 'fixed')\n        //     .style('left', d3.event.clientX + 'px')\n        //     .style('top', d3.event.clientY + 'px');\n        //   })\n        // .on('mouseout', () => {\n        //   tooltip\n        //       .style('display', 'none');\n        // });\n  });\n\n  // append X axis label\n  if (!(hideAxis && hideAxis.bottom)) {\n    // add the x Axis\n    container.append('g')\n        .attr('transform', 'translate(0,' + height + ')')\n        .style('font-family', labelFont ? labelFont : \"'Source Sans Pro',sans-serif\")\n        .call(d3.axisBottom(xScale));\n    svg\n      .append('text')\n      .attr('transform', `translate(${width / 2 + margin.left}, ${height + margin.bottom + (margin.top / 2)})`)\n        .style('font-family', labelFont ? labelFont : \"'Source Sans Pro',sans-serif\")\n        .style('font-size', '0.8rem')\n        .style('text-anchor', 'middle')\n        .text(axisLabels && axisLabels.bottom ? axisLabels.bottom : '');\n  }\n  if (!(hideAxis && hideAxis.left)) {\n      // add the y Axis\n    container.append('g')\n      .style('font-family', labelFont ? labelFont : \"'Source Sans Pro',sans-serif\")\n      .call(d3.axisLeft(yScale).tickFormat(formatNumber));\n    // append Y axis label\n    svg\n      .append('text')\n        .attr('y', margin.top / 2)\n        .attr('x', margin.right)\n        .attr('dy', '0.75em')\n        .style('font-size', '0.8rem')\n        .style('font-family', labelFont ? labelFont : \"'Source Sans Pro',sans-serif\")\n        .text(axisLabels && axisLabels.left ? axisLabels.left : '');\n  }\n\n  if (averageLines && averageLines.length) {\n    averageLines.forEach(line => {\n      svg\n       .append('line')\n      .attr('x1',margin.left)\n      .attr('x2',size.width - margin.right)\n      .attr('y1', yScale(line.value) + 0.5)\n      .attr('y2', yScale(line.value) + 0.5)\n      .attr('stroke-width', line.strokeWidth ? line.strokeWidth : '1px')\n      .attr('stroke', line.strokeColor ? line.strokeColor : '#333')\n      .attr('stroke-dasharray', line.strokeDasharray ? line.strokeDasharray : 0)\n      .style('pointer-events', 'none');\n\n      if (line.label) {\n\n        svg.append('text')\n          .attr('x', line.labelPlacement === LabelPlacement.right ? size.width - margin.right : margin.left + 8)\n          .attr('y',yScale(line.value) - 4)\n          .style('text-anchor', line.labelPlacement === LabelPlacement.right ? 'end' : 'start')\n          .style('opacity', 0.8)\n          .style('font-family', labelFont ? labelFont : \"'Source Sans Pro',sans-serif\")\n          .style('font-size', '12px')\n          .style('pointer-events', 'none')\n          .text(line.label);\n      }\n    });\n  }\n\n};\n","import React, {useState, useEffect, useRef} from 'react';\nimport styled from 'styled-components';\nimport createBarChart, {\n  Datum as BarChartDatum,\n  LabelPlacement,\n} from '../d3/barChart';\nimport debounce from 'lodash/debounce';\nimport * as d3 from 'd3';\n\nconst SizingElm = styled.div`\n  height: 450px;\n  width: 100%;\n\n  svg {\n    width: 100%;\n    height: 100%;\n  }\n`;\n\ninterface Props {\n  id: string;\n  data: BarChartDatum[][];\n  axisLabels?: {left?: string, bottom?: string};\n    axisMinMax?: {\n    minY?: number,\n    maxY?: number,\n  };\n  hideAxis?: {\n    left?: boolean;\n    bottom?: boolean;\n  }\n  averageLines?: {\n    value: number,\n    label?: string;\n    labelPlacement?: LabelPlacement;\n    strokeWidth?: number;\n    strokeDasharray?: number;\n    strokeColor?: string;\n  }[]\n  labelFont?: string;\n}\n\nexport const ZoomableBarChart = (props: Props) => {\n  const {\n    id\n  } = props;\n  const sizingNodeRef = useRef<HTMLDivElement | null>(null);\n  const svgNodeRef = useRef<any>(null);\n\n  const [windowWidth, setWindowWidth] = useState<number>(window.innerWidth);\n\n  useEffect(() => {\n    const updateWindowWidth = debounce(() => {\n      setWindowWidth(window.innerWidth);\n    }, 500);\n    window.addEventListener('resize', updateWindowWidth);\n    return () => {\n      window.removeEventListener('resize', updateWindowWidth);\n    };\n  }, []);\n\n\n  useEffect(() => {\n    console.log('effect runs')\n    let svgNode: HTMLDivElement | null = null;\n    if (svgNodeRef && svgNodeRef.current && sizingNodeRef && sizingNodeRef.current) {\n      const sizingNode = sizingNodeRef.current;\n      svgNode = svgNodeRef.current;\n      console.log({svgNode, sizingNode});\n      const svg = d3.select(svgNode);\n      createBarChart({\n        svg, data: props.data, labelFont: props.labelFont, size: {\n          width: sizingNode.clientWidth, height: sizingNode.clientHeight,\n        },\n        axisLabels: props.axisLabels,\n        axisMinMax: props.axisMinMax,\n        hideAxis: props.hideAxis,\n        averageLines: props.averageLines,\n      });\n    }\n    return () => {\n      if (svgNode) {\n        console.log('clean up')\n        svgNode.innerHTML = '';\n      }\n    };\n  }, [svgNodeRef, sizingNodeRef, windowWidth, props]);\n\n  return (\n    <SizingElm ref={sizingNodeRef}>\n      <svg ref={svgNodeRef} key={id + windowWidth + 'svg'} />\n    </SizingElm>\n  );\n};\n\nexport {\n  Props\n}\nexport default ZoomableBarChart;\n","import * as React from 'react'\nimport ZoomableBarChart, {Props} from './components/ZoomableBarChart';\nimport styled from 'styled-components';\n\nconst Root = styled.div`\n  width: 100%:\n  height: 100vh;\n`;\n\n\n/* TO DO:\n\n[ ] Implement D3 barchart, generic\n[ ] Bar chart should return callback functions that allow for updating of the data\n[ ] Add animations between data updates\n[ ] Implement actual test data\n\n*/\n\nexport {Props};\n\nexport default (props: Props) => {\n  return (\n    <Root>\n      <ZoomableBarChart {...props} />\n    </Root>\n  );\n}\n","import React from 'react'\nimport ZoomableTreeMap from 'react-zoomable-bar-chart'\n\nconst data = [\n  [\n    {\n      x: '2011',\n      y: 10,\n      stroke: 'lightblue',\n      fill: 'transparent',\n    },\n    {\n      x: '2012',\n      y: 11,\n      stroke: 'lightblue',\n      fill: 'transparent',\n    },\n    {\n      x: '2013',\n      y: 6,\n      stroke: 'lightblue',\n      fill: 'transparent',\n    },\n    {\n      x: '2014',\n      y: 8,\n      stroke: 'lightblue',\n      fill: 'transparent',\n    },\n    {\n      x: '2015',\n      y: 9,\n      stroke: 'lightblue',\n      fill: 'transparent',\n    },\n    {\n      x: '2016',\n      y: 12,\n      stroke: 'lightblue',\n      fill: 'transparent',\n    },\n  ],\n  [\n    {\n      x: '2011',\n      y: 6,\n      fill: 'blue',\n    },\n    {\n      x: '2012',\n      y: 9,\n      fill: 'blue',\n    },\n    {\n      x: '2013',\n      y: 2,\n      fill: 'blue',\n    },\n    {\n      x: '2014',\n      y: 5,\n      fill: 'blue',\n    },\n    {\n      x: '2015',\n      y: 8,\n      fill: 'blue',\n    },\n    {\n      x: '2016',\n      y: 7,\n      fill: 'blue',\n    },\n  ],\n];\n\nconst App = () => {\n  return (\n    <ZoomableTreeMap\n      id={'example-bar-chart'}\n      data={[data[0]]}\n      axisLabels={{left: 'Value', bottom: 'Year'}}\n    />\n  );\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}