{"version":3,"sources":["App.tsx","index.tsx"],"names":["font","Root","styled","div","BreadCrumbList","ul","BreadCrumb","li","BreadCrumbLink","button","LegendRoot","LegendItem","LegendBlock","LegendText","SearchContainer","naics_2017","JSON","parse","bos_nyc_extract","colorMap","id","color","totals","numberOfEmployees","numberOfFirms","merged","panelData","forEach","d","naics_id","name","level","parent_id","sectorId","current","find","datum","console","error","Error","cities","filter","c","length","push","city","value","year","num_employ","num_company","city_id","naicsId","parentId","title","App","useState","focusedIndustryId","setFocusedIndustryId","filtered","data","f","city_0_total","city_1_total","diff","Math","abs","digits","x","substring","groupName","y","fill","rgba","tooltipContent","parseFloat","toFixed","tooltipContentOnly","onClick","undefined","sortedData","sortBy","reverse","breadCrumbList","currentParentId","breadCrumbs","map","industry","i","key","topLevelBreadCrumb","topLevelTitle","onSelect","showCount","resultsIdentation","maxResults","defaultPlaceholderText","vizType","VizType","ClusterBarChart","axisLabels","left","style","backgroundColor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.380587f8.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport DataViz, {\n  VizType,\n  ClusterBarChartDatum,\n} from 'react-fast-charts';\nimport raw from 'raw.macro';\nimport {rgba} from 'polished';\nimport sortBy from 'lodash/sortBy';\nimport styled from 'styled-components';\nimport './styling/fonts/fonts.css'\nimport PanelSearch, {Datum as PanelDatum} from 'react-panel-search';\n\nconst font = \"OfficeCodeProWeb, monospace\";\n\nconst Root = styled.div`\n  padding: 1rem;\n  font-family: ${font};\n  max-width: 1180px;\n  margin: auto;\n`;\n\nconst BreadCrumbList = styled.ul`\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  display: flex;\n  align-items: center;\n  min-height: 80px;\n`;\n\nconst BreadCrumb = styled.li`\n  font-size: 0.85rem;\n  font-weight: 600;\n  max-width: 20%;\n`;\n\nconst BreadCrumbLink = styled.button`\n  border: none;\n  background-color: transparent;\n  padding: 0;\n  font-size: 0.85rem;\n  font-weight: 600;\n  font-family: ${font};\n  color: rgb(78, 140, 141);\n  cursor: pointer;\n  text-align: left;\n  margin-right: 1rem;\n  display: flex;\n  align-items: center;\n\n  span {\n    text-decoration: underline;\n  }\n\n  &:after {\n    content: 'â†’';\n    margin: 0 0.5rem;\n    font-size: 1rem;\n    text-decoration: none;\n    display: inline-block;\n  }\n`;\n\nconst LegendRoot = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst LegendItem = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 4rem 0rem 0;\n`;\n\nconst LegendBlock = styled.div`\n  width: 4em;\n  height: 2rem;\n  margin: 0 0.1rem;\n`;\n\nconst LegendText = styled.div`\n  font-size: 0.85rem;\n  text-transform: uppercase;\n  margin: 0 0.5rem;\n`;\n\nconst SearchContainer = styled.div`\nmax-width: 280px;\nwidth: 100%;\nfont-family: ${font};\n\n.react-panel-search-search-bar-input,\nbutton {\n  font-family: ${font};\n}\n\n.react-panel-search-search-bar-input {\n  text-transform: uppercase;\n  font-weight: 400;\n  font-size: 1rem;\n  background-color: #fff;\n  border: solid 1px #7c7c7c;\n  box-shadow: none;\n  outline: none;\n\n  &:focus::placeholder {\n    color: #fff;\n  }\n}\n\n.react-panel-search-current-tier-breadcrumb-outer,\n.react-panel-search-next-button,\n.react-panel-search-search-bar-dropdown-arrow {\n  svg polyline {\n    stroke: #7c7c7c;\n  }\n}\n.react-panel-search-search-bar-dropdown-arrow {\n  width: 1rem;\n}\n.react-panel-search-search-bar-dropdown-arrow,\n.react-panel-search-search-bar-clear-button {\n  background-color: #fff;\n}\n\n.react-panel-search-search-bar-search-icon {\n  svg path {\n    fill: #7c7c7c;\n  }\n}\n\n.react-panel-search-search-results {\n  border-left: solid 1px #7c7c7c;\n  border-right: solid 1px #7c7c7c;\n  border-bottom: solid 1px #7c7c7c;\n}\n\n.react-panel-search-current-tier-title,\n.react-panel-search-current-tier-breadcrumb-outer {\n  border-color: #cfbc3c;\n}\n`;\n\ninterface NaicsDatum {\n  naics_id: number,\n  code: string,\n  name: string,\n  level: 1 | 2 | 3 | 4 | 5 | 6,\n  parent_id: null | number,\n  parent_code: null | string,\n  code_hierarchy: string,\n  naics_id_hierarchy: string,\n}\n\ninterface BosNYDatum {\n  city_id: 945 | 1022,\n  name: \"New York\" | \"Boston\",\n  naics_id: number,\n  level: 1 | 2 | 3 | 4 | 5 | 6,\n  year: 2019 | 2020,\n  num_company: number,\n  num_employ: number,\n}\nconst naics_2017: NaicsDatum[] = JSON.parse(raw('./data/naics_2017.json'));\nconst bos_nyc_extract: BosNYDatum[] = JSON.parse(raw('./data/bos_nyc_extract.json'));\n\nconst colorMap = [\n  { id: 0, color: '#A973BE' },\n  { id: 1, color: '#F1866C' },\n  { id: 2, color: '#FFC135' },\n  { id: 3, color: '#93CFD0' },\n  { id: 4, color: '#488098' },\n  { id: 5, color: '#77C898' },\n  { id: 6, color: '#6A6AAD' },\n  { id: 7, color: '#D35162' },\n  { id: 8, color: '#F28188' },\n]\n\ninterface MergedDatum {\n  naicsId: number,\n  name: string,\n  parentId: number | null,\n  sectorId: number,\n  level: 1 | 2 | 3 | 4 | 5 | 6,\n  color: string,\n  numberOfEmployees: Array<{\n    city: {id: number, name: string},\n    value: number,\n    year: number,\n  }>,\n  numberOfFirms: Array<{\n    city: {id: number, name: string},\n    value: number,\n    year: number,\n  }>,\n}\n\nconst targetYear = 2020;\n\nconst totals = {\n  'Boston': {numberOfEmployees: 0, numberOfFirms: 0},\n  'New York': {numberOfEmployees: 0, numberOfFirms: 0},\n}\nconst merged: MergedDatum[] = [];\nconst panelData: PanelDatum[] = [];\n\nnaics_2017.forEach(d => {\n  const {naics_id, name, level, parent_id} = d;\n  let sectorId = naics_id;\n  let current = naics_2017.find(datum => datum.naics_id === naics_id);\n  while(current && current.parent_id !== null) {\n  // eslint-disable-next-line\n    current = naics_2017.find(datum => datum.naics_id === (current as NaicsDatum).parent_id);\n    if (current && current.parent_id !== null) {\n      sectorId = current.parent_id;\n    } else if (current && current.naics_id !== null) {\n      sectorId = current.naics_id;\n    }\n  }\n  if (sectorId > 8) {\n    console.error(current);\n    throw new Error('Parent out of range')\n  }\n  const {color} = colorMap.find(({id}) => id === sectorId) as {color: string};\n  const cities = bos_nyc_extract.filter(c => c.naics_id === naics_id);\n  const numberOfEmployees: MergedDatum['numberOfEmployees'] = [];\n  const numberOfFirms: MergedDatum['numberOfFirms'] = [];\n  if (!cities || cities.length < 2) {\n    numberOfEmployees.push({\n      city: {id: 945, name: 'New York'},\n      value: 0,\n      year: targetYear,\n    })\n    numberOfFirms.push({\n      city: {id: 945, name: 'New York'},\n      value: 0,\n      year: targetYear,\n    })\n    numberOfEmployees.push({\n      city: {id: 1022, name: 'Boston'},\n      value: 0,\n      year: targetYear,\n    })\n    numberOfFirms.push({\n      city: {id: 1022, name: 'Boston'},\n      value: 0,\n      year: targetYear,\n    })\n  }\n  cities.forEach(c => {\n    if (c.year === targetYear) {\n      if (c.level === 1) {\n        totals[c.name].numberOfEmployees += c.num_employ;\n        totals[c.name].numberOfFirms += c.num_company;\n      }\n      numberOfEmployees.push({\n        city: {id: c.city_id, name: c.name},\n        value: c.num_employ,\n        year: c.year,\n      })\n      numberOfFirms.push({\n        city: {id: c.city_id, name: c.name},\n        value: c.num_company,\n        year: c.year,\n      })\n    }\n  });\n  merged.push({\n    naicsId: naics_id,\n    name,\n    parentId: parent_id,\n    sectorId,\n    level,\n    color,\n    numberOfEmployees,\n    numberOfFirms,\n  })\n  panelData.push({\n    id: naics_id,\n    title: name,\n    level: level,\n    parent_id,\n  })\n});\n\nconst App = () => {\n  const [focusedIndustryId, setFocusedIndustryId] = useState<number | null>(null);\n  const filtered = merged.filter(d => d.parentId === focusedIndustryId);\n  const data: ClusterBarChartDatum[] = [];\n  filtered.forEach(d => {\n    d.numberOfFirms.forEach(f => {\n      if (f.year === targetYear) {\n        const city_0_total = d.numberOfFirms[0] && d.numberOfFirms[0].value\n          ? (d.numberOfFirms[0].value / totals[d.numberOfFirms[0].city.name].numberOfFirms) * 100 : 0;\n        const city_1_total = d.numberOfFirms[1] && d.numberOfFirms[1].value\n          ? (d.numberOfFirms[1].value / totals[d.numberOfFirms[1].city.name].numberOfFirms) * 100 : 0;\n        const diff = Math.abs(city_0_total - city_1_total);\n        let digits: number = 20;\n        if (city_0_total > 0.01 || city_1_total > 0.01 || diff > 0.01) {\n          digits = 2;\n        } else if (city_0_total > 0.001 || city_1_total > 0.001 || diff > 0.001) {\n          digits = 3;\n        } else if (city_0_total > 0.0001 || city_1_total > 0.0001 || diff > 0.0001) {\n          digits = 4;\n        } else if (city_0_total > 0.00001 || city_1_total > 0.00001 || diff > 0.00001) {\n          digits = 5;\n        } else if (city_0_total < 0.000001 || city_1_total < 0.000001 || diff < 0.000001) {\n          digits = 6;\n        }\n        const x = d.name.length > 20 ? d.name.substring(0, 20) + '...' : d.name;\n        data.push({\n          groupName: f.city.name,\n          x,\n          y: (f.value / totals[f.city.name].numberOfFirms) * 100,\n          fill: f.city.id === 945 ? d.color : rgba(d.color, 0.4),\n          tooltipContent: `\n            <div style='text-transform: uppercase; font-size: 0.85rem'>\n              <div style='font-size: 0.9rem; margin-bottom: 0.5rem;'>\n                <strong>${d.name}</strong>\n              </div>\n              <div>\n                <div style='display: flex; justify-content: space-between;'>\n                  <span style='margin-right: 1rem'>New York:</span> <span>${parseFloat((city_0_total).toFixed(digits))}%</span>\n                </div>\n                <div style='display: flex; justify-content: space-between;'>\n                  <span style='margin-right: 1rem'>Boston:</span> <span>${parseFloat((city_1_total).toFixed(digits))}%</span>\n                </div>\n                <div style='display: flex; justify-content: space-between;'>\n                  <span style='margin-right: 1rem'>Difference:</span> <span>${parseFloat((diff).toFixed(digits))}%</span>\n                </div>\n              </div>\n            </div>\n          `,\n          tooltipContentOnly: true,\n          onClick: d.level < 6 ? () => setFocusedIndustryId(d.naicsId) : undefined,\n        })\n      }\n    });\n  });\n  const sortedData = sortBy(data, ['groupName', 'y']).reverse();\n\n  const breadCrumbList: MergedDatum[] = [];\n  let current = focusedIndustryId === null ? undefined : merged.find(d => d.naicsId === focusedIndustryId);\n  while (current !== undefined) {\n    breadCrumbList.push(current);\n    const currentParentId = current.parentId;\n    current = merged.find(d => d.naicsId === currentParentId)\n  }\n  const breadCrumbs = breadCrumbList.reverse().map((industry, i) => {\n    if (i === breadCrumbList.length - 1) {\n      return (\n        <BreadCrumb key={industry.naicsId}>\n          {industry.name}\n        </BreadCrumb>\n      );\n    }\n    return (\n      <BreadCrumb key={industry.naicsId}>\n        <BreadCrumbLink onClick={() => setFocusedIndustryId(industry.naicsId)}>\n          <span>{industry.name}</span>\n        </BreadCrumbLink>\n      </BreadCrumb>\n    );\n  })\n  const topLevelBreadCrumb = breadCrumbList.length ? (\n    <BreadCrumb>\n      <BreadCrumbLink onClick={() => setFocusedIndustryId(null)}>\n        <span>Sector Level</span>\n      </BreadCrumbLink>\n    </BreadCrumb>\n  ) : (\n    <BreadCrumb>\n        Sector Level\n    </BreadCrumb>\n  )\n\n  const onSearchSelect = (datum: PanelDatum | null) => {\n    if (!datum) {\n      setFocusedIndustryId(null);\n    } else {\n      if ((datum.level as number) === 6 ) {\n        setFocusedIndustryId(datum.parent_id as number);\n      } else {\n        setFocusedIndustryId(datum.id as number);\n      }\n    }\n  }\n\n  return (\n    <Root>\n      <SearchContainer>\n        <PanelSearch\n          data={panelData}\n          topLevelTitle={'Sector Level'}\n          onSelect={onSearchSelect}\n          showCount={true}\n          resultsIdentation={1.75}\n          maxResults={500}\n          defaultPlaceholderText={'Search an industry'}\n        />\n      </SearchContainer>\n      <BreadCrumbList>\n        {topLevelBreadCrumb}\n        {breadCrumbs}\n      </BreadCrumbList>\n      <DataViz\n        id={'example-cluster-bar-chart'}\n        vizType={VizType.ClusterBarChart}\n        data={sortedData}\n        axisLabels={{left: '% of Total Firms'}}\n      />\n      <LegendRoot>\n        <LegendItem>\n          <LegendText>\n            New York\n          </LegendText>\n          <LegendBlock style={{backgroundColor: '#666'}} />\n        </LegendItem>\n        <LegendItem>\n          <LegendBlock style={{backgroundColor: '#bbb'}} />\n          <LegendText>\n            Boston\n          </LegendText>\n        </LegendItem>\n      </LegendRoot>\n    </Root>\n  );\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}